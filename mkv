import React, { useState, useEffect } from 'react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import rehypeRaw from 'rehype-raw';
import rehypeSanitize from 'rehype-sanitize';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { darcula } from 'react-syntax-highlighter/dist/esm/styles/prism';

interface MarkdownViewerProps {
  file: string;
}

const MarkdownViewer: React.FC<MarkdownViewerProps> = ({ file }) => {
  const [content, setContent] = useState<string>('');

  useEffect(() => {
    if (file) {
      fetch(`${process.env.PUBLIC_URL}/docs/${file}.md`)
        .then(response => response.text())
        .then(text => setContent(text))
        .catch(error => console.error('Error fetching markdown file:', error));
    }
  }, [file]);

  return (
    <div>
      {file ? (
        <ReactMarkdown
          remarkPlugins={[remarkGfm]}
          rehypePlugins={[rehypeRaw, rehypeSanitize]}
          components={{
            code({ node, inline, className, children, ...props }) {
              const match = /language-(\w+)/.exec(className || '');
              return !inline && match ? (
                <SyntaxHighlighter
                  style={darcula}
                  language={match[1]}
                  PreTag="div"
                  {...props}
                >
                  {String(children).replace(/\n$/, '')}
                </SyntaxHighlighter>
              ) : (
                <code className={className} {...props}>
                  {children}
                </code>
              );
            }
          }}
        >
          {content}
        </ReactMarkdown>
      ) : (
        <p>Please select a file to view its content.</p>
      )}
    </div>
  );
};

export default MarkdownViewer;